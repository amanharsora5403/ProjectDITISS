# This workflow will build a Java project with Maven and run the Docker container.

name: Java CI with Maven and Docker

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:

    runs-on: self-hosted  # Use your self-hosted runner.

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    # Step to set up JDK 17
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven

    # Step to build the project using Maven
    - name: Build with Maven
      run: mvn -B package --file pom.xml  # Build the JAR file

    # Step to build & push the Docker image
    - name: Build & Push Docker image
      uses: mr-smithers-excellent/docker-build-push@v6
      with:
        image: amanharsora543211/projectjava  # Your image name
        tags: v1, latest
        registry: docker.io
        username: ${{ secrets.DOCKER_USERNAMES }}  # Docker Hub username stored as a secret
        password: ${{ secrets.DOCKER_PASSWORDS }}  # Docker Hub password stored as a secret

    # Step to run the Docker container
    - name: Run Docker container
      run: |
        # Pull the Docker image from Docker Hub
        docker pull amanharsora543211/projectjava:latest
        
        # Stop and remove any running container with the same name (if any)
        docker stop my-java-container || true
        docker rm my-java-container || true

        # Run the Docker container
        docker run -d -p 8080:8080 --name my-java-container amanharsora543211/projectjava:latest

        # Step to configure AWS credentials
    - name: Set up AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}  # AWS access key
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}  # AWS secret access key
        aws-region: 'us-east-1'  # Specify your region

    
    - name: Get Kube config file
      id: getconfig
      if: steps.apply.outcome == 'success'
      run: aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER }}

    - name: Install Ingress controller
      if: steps.apply.outcome == 'success' && steps.getconfig.outcome == 'success'
      run: kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.1.3/deploy/static/provider/aws/deploy.yaml
